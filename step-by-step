Step 1 GCC
  Gcc is a open source compiler well need so the computer can read what we give it. If this step doesnt work for some reason youll need to download gcc.
  1. Lets see if we have it   $ module avail gcc

  ------------------------------- /usr/tce/modulefiles/toolchains/Core -------------------------------
     gcc/10.3.1-magic (D)    gcc/11.2.1-magic    gcc/12.1.1-magic
     gcc/10.3.1              gcc/11.2.1          gcc/12.1.1

  2. Load one of thesse $ module load gcc/12.1.1-magic
    Lmod is automatically replacing "intel-classic/2021.6.0-magic" with "gcc/12.1.1-magic".

      Due to MODULEPATH changes, the following have been reloaded:
        1) mvapich2/2.3.7
   
  3. Check it worked $ gcc --version
      gcc (GCC) 12.1.1 20220628 (Red Hat 12.1.1-3)
    Copyright (C) 2022 Free Software Foundation, Inc.
    This is free software; see the source for copying conditions.  There is NO
    warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Step 2. Creating the directory the you os (operating system) resides in
  1.  Make directory   $ mkdir os
  2.  Open directory   $ cd os

Step 3. Clone git
  1. os $ /usr/bin/time git clone git://gcc.gnu.org/git/gcc.git
      Updating files: 100% (134103/134103), done.
      485.17user 36.81system 14:12.68elapsed 61%CPU (0avgtext+0avgdata 1333416maxresident)k
      758056inputs+4784040outputs (4561major+356307minor)pagefaults 0swaps

Step 4. Update Math libraries (each one will load something)
  1. $ mkdir tarballs
  2. $ cd tarballs/
  3. $ wget https://gmplib.org/download/gmp/gmp-6.3.0.tar.xz
  4. $ wget https://www.mpfr.org/mpfr-current/mpfr-4.2.1.tar.bz2
  5. $ wget https://ftp.gnu.org/gnu/mpc/mpc-1.3.1.tar.gz
  6. $ wget https://gcc.gnu.org/pub/gcc/infrastructure/isl-0.24.tar.bz2
  7. $ wget https://github.com/facebook/zstd/archive/refs/heads/dev.zip

Step 5. UnTar these libraries
  1. $ cd ../gcc
  2. $ tar xf ../tarballs/gmp*
  3. $ tar xf ../tarballs/mpc*
  4. $ tar xf ../tarballs/mpfr*
  5. $ tar xf ../tarballs/isl*

Step 6. Fix the naming problem (files have the verson in their names)
  1. $ ls -l | grep mpc    
        drwx--S---  8 name os    4096 Dec 15  2022 mpc-1.3.1
  2. $ ln -s mpfr-4.2.1 mpfr
  3. $ ln -s gmp-6.3.0 gmp
  4. $ ln -s mpc-1.3.1 mpc
  5. $ ln -s isl-0.24 isl
  6. Check with $ ls -l mpfr 
        lrwxrwxrwx 1 name os 10 Mar 19 13:33 mpfr -> mpfr-4.2.1

Step 7. zstd needs special istructions
  1. $ cd ..
  2. $ unzip tarballs/dev.zip
      ...
      zstd-dev/tests/cli-tests/bin/unzstd -> zstd
      zstd-dev/tests/cli-tests/bin/zstdcat -> zstd
  3. $ cd zstd-dev/
  4. $ cd ..
  5. $ mkdir zstd-build
  6. $ cmake -S ../zstd-dev/build/cmake -B .
        -- Build files have been written to: /os/zstd-build  
  
Step 8. Edit the make file
  1. $ ccmake .         (include the period)
      A. Arrow down to: CMAKE_INSTALL_PREFIX             /usr/local
      B. Press Enter
      C. Replace with the install path: /os/zstd-install
      D. Press Enter
      E. Press c  (to configure)
      F. Press g  (to generate)
  2. Build in parrallel $ srun -N 1-1 --exclusive make -j 100
      ....
      100%] Built target zstdmt
      [100%] Built target zstdcat
  
Step 9. Create and install the zstd-install library in zstd-build
  1. $ mkdir ../zstd-install
  2. $ make install
  3. Check it worked
    A. $ cd ../zstd-install/
    B. $ ls
          bin  include  lib64  share
    C. $ ls lib64
          cmake  libzstd.a  libzstd.so  libzstd.so.1  
                  libzstd.so.1.5.6  pkgconfig
    D. $ cd ..     (in os directory)

Step 10. gcc dedicated directory
  1. $ cd gcc
  2. $ git tag | grep gcc-13   
      basepoints/gcc-13 releases/gcc-13.1.0 releases/gcc-13.2.0
  3. $ git checkout      (updater)
  4. $ cd ..             (os directroy)
  5. $ mkdir gcc-build
  6. $ cd gcc-build
  7. $ mkdir ../gcc-instal
  8. $ ../gcc/configure --with-zstd=/os/zstd-install/lib64 
        --prefix=/os/gcc-install 
         --enable-languages=c,c++,fortran     (all one line
  9. $ tmux -S ../poodle17.tmux new    (This is to avoid timeouts)
  10. $ /usr/bin/time srun -N 1-1 --exclusive -t 2:00:00 make -j 111    
            Begin to wait this can/will take a long time  
                  To leave tmux enter command: $ exit

Step 11. Some git cloning
  1. $ git clone https://gitlab.com/qemu-project/qemu.git
  2. $ git clone git@github.com:tianocore/edk2.git
  3. $ git clone git@github.com:acpica/acpica.git

Step 12 Install gcc
  1. $ srun -N 1-1 --exclusive make -j 111 install
  2. $ make install

Step 13
  1. $ cd ..
  2. $ cat >> os.sh
     Input into the blank space: export PATH=/os/gcc-install/bin:$PATH
  3.$ . os.sh
  4.$ which gcc
      Expected output: /os/gcc-install/bin/gcc
  5. $ gcc --version
      Expected output: gcc (GCC) 13.2.0

Step 14
  1. $ cd ..
  2. $ mkdir qemu-build
  3. $ mkdir qemu-install
  4. $ cd qemu
  5. $ git checkout v8.2.1
  6. $ cd ../qemu-build
  7. $ ../qemu/configure --prefix=os/qemu-install

Step 15 
  1. $ git clone git@github.com:ninja-build/ninja.git
        A. cd ninja
        b. ./configure.py --bootstrap
        c. cd ..
  2. $ module load ninja/1.11.1
  3. $ /usr/bin/time srun -N 1-1 --exclusive -t 2:00:00 make -j 111
  4. $ make install

Step 16
  1. $ cd ..
  2. $ cd acpica/generate/unix
  3. $ ACPI_HOST=_LINUX PREFIX=/usr/workspace/os/acpica-install srun -N 1-1 --exclusive make -j 111
  4. $ cd ../../../
  5. $ vi os.sh
  6. add: export PATH=/usr/workspace/os/acpica-install/bin:$PATH
  7. :q

Step 17
  1. cd edk2
  2. 


